{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fswiss\fcharset0 ArialMT;\f2\fswiss\fcharset0 Helvetica;
\f3\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red83\green83\blue83;\red255\green255\blue255;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c40000\c40000\c40000;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 2.
\f1  
\f2 What is OOP? List OOP concepts..?\
\'97>
\f1\fs36 \cf3 \cb4 \expnd0\expndtw0\kerning0
Object-oriented programming (OOP) is a computer programming model that organizes software design around data, or objects, rather than functions and logic. An object can be defined as a data field that has unique attributes and behavior.\
\
Classes :- Classes are blueprints for creating objects. They define the structure and behavior of objects by specifying data and functions.\
\
-> objects :- Objects are instances of classes that encapsulate data and methods. They are the building blocks of OOP and represent real-world concepts.\
\
-> Encapsulation :- Encapsulation is the bundling of data and methods that operate on that data within a single class. It hides the internal state of an object and \
                    only exposes the necessary functionalities through methods.\
\
-> Inheritance :- Inheritance allows a class to inherit attributes and methods from another class. It promotes code reusability and enables hierarchical \
                  relationships between classes.\
\
-> Polymorphism :- Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables flexibility and extensibility by\
                   providing a way to perform a single action in different ways.\
\
-> Abstraction :- Abstraction focuses on hiding complex implementation details and only showing the necessary features of an object. It allows developers to\
                  create simplified models that represent real-world objects more efficiently.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \cb1 \kerning1\expnd0\expndtw0 3.
\f1  
\f2 What is the difference between OOP and POP?\
\'97> 
\fs28 OOP :- Object-Oriented Programming\
1:- Bottom-Up approach\
2:- OOP is inheritance Supports\
3:- Code Reusability Supports\
4:-Data handling is possible in OOP due to programming.\
5:-Using for solving big problems.\
6:- Example c++,JAVA,C#,NET\
\
POP :- Procedure Oriented Programming\
1:- Top-down approach\
2:- POP do not support inheritance \
3:- Cod Reusability Don\'92t support\
4:- It is less secure than OOP\
5:- Not suitable for big problems\
6:- Example C,FORTRAN
\f1\fs48 \cf3 \cb4 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs28 \cf0 \
\
\
}